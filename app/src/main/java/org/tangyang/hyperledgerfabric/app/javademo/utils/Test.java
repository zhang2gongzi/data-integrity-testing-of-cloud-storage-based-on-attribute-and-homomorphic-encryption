package org.tangyang.hyperledgerfabric.app.javademo.utils;

import org.tangyang.hyperledgerfabric.app.javademo.cpabe.CPABE;
import org.tangyang.hyperledgerfabric.app.javademo.cpabe.TreeNode;

import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

public class Test {
    public static void main(String[] args) throws NoSuchAlgorithmException {
        BigInteger sigma1 = new BigInteger("2631133756251232298029892384890479317581045743105559733581990735343597001473754172377346599918703139234227211085190096520893516746613776700471774030914996903540970695559513647387501081030804819542692814344352557015254055769682125201585700977691590226911184834781980395070012201076818135398902366579651439201044792908438993989449710123106807751749140960288635046993965848118969124390425258504099591164945067967409060159417944976121844921122479535852952371406825748638189912870342522346360" +
                "686936999591465822792222450486450129755693377339195609999801712139095046101203479459943213909837503450596403029484497250102903016");
        BigInteger sigma2 = new BigInteger("2631133756251232298029892384890479317581045743105559733581990735343597001473754172377346599918703139234227211085190096520893516746613776700471774030914996903540970695559513647387501081030804819542692814344352557015254055769682125201585700977691590226911184834781980395070012201076818135398902366579651439201044792908438993989449710123106807751749140960288635046993965848118969124390425258504099591164945067967409060159417944976121844921122479535852952371406825748638189912870342522346360" +
                "686936999591465822792222450486450129755693377339195609999801712139095046101203479459943213909837503450596403029484497250102903016");
        BigInteger n = new BigInteger("267275943564259666577195191127155757195889935274656071761894970075001143912358039313404497578698804355010593754479758781860786165526526922279337861326312823709536316665089126591014270722646233704626394830717361252167000174803815124619489119844899116895414477981975693865971588732510825762342662920158830316254982056808493478918621236942638181170037088940467338655376139838249973709112589278558086407615084050211214020026428575533078200957832891300697260869885941140979752994473181508132011770" +
                "8582395308379933432210197849032402288775983043719689148922550789849410813126252359819083799060403585157155695987757646473149");
        BigInteger r = new BigInteger("226179536048305124653808216165300507299731349524");
        //System.out.println(GetHash.getSHA256("651600115523509227969983932205835118187138172412783416047176452177586870385219286021236896041208258037000342245326743742294287416677498098800436249751889101816679183430579899350616154073566065589040926958912984706079971540788305593256219004215915167506733377897099331888396646994388804701134467105618776252906772422538207831706175913429061722055752800215129667324385547785881193083083126289729940565784139072119240617695281396479443455232207375022893884278206317584323361082407494579" +
                //"875635787544412176928196028269785476555424245521353814924534760013879419384208898615208617128304316831562676435984496147226240406854"));
        //System.out.println(GetHash.getSHA256(sigma1.modPow(r,n).toString()));
        TreeNode node = new TreeNode("A");
        List<BigInteger> bigIntegers = generateRandomBigIntegerList("226179536048305124653808216165300507299731349524", 10);
        List<BigInteger> bigIntegers1 = generateRandomBigIntegerList("226179536048305124653808216165300507299731349524", 10);
        long start = System.currentTimeMillis();
        for(int i = 0; i<10000;i++){
            GetHash.getSHA256("fid-data-1");
        }
        long t1 = System.currentTimeMillis();
        System.out.println("==============================");
        for(int i = 0; i<10000;i++){
            CPABE.sha256("fid-data-1");
        }
        System.out.println(t1 -start);
        System.out.println(System.currentTimeMillis() - t1);

    }
    public  static List<BigInteger> generateRandomBigIntegerList(String ctx, int size) {

        // 生成种子
        byte[] seed = ctx.getBytes();

        // 生成随机大整数数列表
        List<BigInteger> randomList = new ArrayList<>();
        randomList.add(new BigInteger(1,seed));
        for (int i = 1; i < size; i++) {
            // 生成一个随机大整数
            BigInteger temp = new BigInteger(1,GetHash.getSHA256(randomList.get(i -1).toString()).getBytes(StandardCharsets.UTF_8));
            randomList.add(temp);
        }

        return randomList;
    }
}
